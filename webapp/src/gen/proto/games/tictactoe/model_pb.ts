// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file proto/games/tictactoe/model.proto (package tictactoe, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message tictactoe.Move
 */
export class Move extends Message<Move> {
  /**
   * @generated from field: int32 row = 1;
   */
  row = 0;

  /**
   * @generated from field: int32 col = 2;
   */
  col = 0;

  constructor(data?: PartialMessage<Move>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tictactoe.Move";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "row", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "col", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Move {
    return new Move().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Move {
    return new Move().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Move {
    return new Move().fromJsonString(jsonString, options);
  }

  static equals(a: Move | PlainMessage<Move> | undefined, b: Move | PlainMessage<Move> | undefined): boolean {
    return proto3.util.equals(Move, a, b);
  }
}

/**
 * @generated from message tictactoe.GameMetadata
 */
export class GameMetadata extends Message<GameMetadata> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int32 player_count = 2;
   */
  playerCount = 0;

  /**
   * @generated from field: repeated string players = 3;
   */
  players: string[] = [];

  /**
   * @generated from field: int32 max_players = 4;
   */
  maxPlayers = 0;

  /**
   * @generated from field: int32 board_size = 5;
   */
  boardSize = 0;

  /**
   * @generated from field: int32 connect_to_win = 6;
   */
  connectToWin = 0;

  /**
   * @generated from field: int32 current_turn = 7;
   */
  currentTurn = 0;

  /**
   * @generated from field: int32 winner = 8;
   */
  winner = 0;

  constructor(data?: PartialMessage<GameMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tictactoe.GameMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "player_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "players", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "max_players", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "board_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "connect_to_win", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "current_turn", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "winner", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameMetadata {
    return new GameMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameMetadata {
    return new GameMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameMetadata {
    return new GameMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: GameMetadata | PlainMessage<GameMetadata> | undefined, b: GameMetadata | PlainMessage<GameMetadata> | undefined): boolean {
    return proto3.util.equals(GameMetadata, a, b);
  }
}

