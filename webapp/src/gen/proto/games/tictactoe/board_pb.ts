// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file proto/games/tictactoe/board.proto (package tictactoe, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message tictactoe.BoardRow
 */
export class BoardRow extends Message<BoardRow> {
  /**
   * @generated from field: repeated int32 cells = 1;
   */
  cells: number[] = [];

  /**
   * @generated from field: int32 length = 2;
   */
  length = 0;

  constructor(data?: PartialMessage<BoardRow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tictactoe.BoardRow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cells", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 2, name: "length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BoardRow {
    return new BoardRow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BoardRow {
    return new BoardRow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BoardRow {
    return new BoardRow().fromJsonString(jsonString, options);
  }

  static equals(a: BoardRow | PlainMessage<BoardRow> | undefined, b: BoardRow | PlainMessage<BoardRow> | undefined): boolean {
    return proto3.util.equals(BoardRow, a, b);
  }
}

/**
 * @generated from message tictactoe.Board
 */
export class Board extends Message<Board> {
  /**
   * @generated from field: repeated tictactoe.BoardRow cells = 1;
   */
  cells: BoardRow[] = [];

  /**
   * @generated from field: int32 dimension = 2;
   */
  dimension = 0;

  constructor(data?: PartialMessage<Board>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tictactoe.Board";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cells", kind: "message", T: BoardRow, repeated: true },
    { no: 2, name: "dimension", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Board {
    return new Board().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Board {
    return new Board().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Board {
    return new Board().fromJsonString(jsonString, options);
  }

  static equals(a: Board | PlainMessage<Board> | undefined, b: Board | PlainMessage<Board> | undefined): boolean {
    return proto3.util.equals(Board, a, b);
  }
}

