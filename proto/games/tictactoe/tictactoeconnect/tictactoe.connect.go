// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/games/tictactoe/tictactoe.proto

package tictactoeconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	tictactoe "github.com/kertox662/game-site/proto/games/tictactoe"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TicTacToeServiceName is the fully-qualified name of the TicTacToeService service.
	TicTacToeServiceName = "tictactoe.TicTacToeService"
)

// TicTacToeServiceClient is a client for the tictactoe.TicTacToeService service.
type TicTacToeServiceClient interface {
	CreateGame(context.Context, *connect_go.Request[tictactoe.CreateGameRequest]) (*connect_go.Response[tictactoe.CreateGameResponse], error)
	GetGameData(context.Context, *connect_go.Request[tictactoe.GetGameDataRequest]) (*connect_go.Response[tictactoe.GetGameDataResponse], error)
	MakeMove(context.Context, *connect_go.Request[tictactoe.MakeMoveRequest]) (*connect_go.Response[tictactoe.MakeMoveResponse], error)
}

// NewTicTacToeServiceClient constructs a client for the tictactoe.TicTacToeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTicTacToeServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TicTacToeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ticTacToeServiceClient{
		createGame: connect_go.NewClient[tictactoe.CreateGameRequest, tictactoe.CreateGameResponse](
			httpClient,
			baseURL+"/tictactoe.TicTacToeService/CreateGame",
			opts...,
		),
		getGameData: connect_go.NewClient[tictactoe.GetGameDataRequest, tictactoe.GetGameDataResponse](
			httpClient,
			baseURL+"/tictactoe.TicTacToeService/GetGameData",
			opts...,
		),
		makeMove: connect_go.NewClient[tictactoe.MakeMoveRequest, tictactoe.MakeMoveResponse](
			httpClient,
			baseURL+"/tictactoe.TicTacToeService/MakeMove",
			opts...,
		),
	}
}

// ticTacToeServiceClient implements TicTacToeServiceClient.
type ticTacToeServiceClient struct {
	createGame  *connect_go.Client[tictactoe.CreateGameRequest, tictactoe.CreateGameResponse]
	getGameData *connect_go.Client[tictactoe.GetGameDataRequest, tictactoe.GetGameDataResponse]
	makeMove    *connect_go.Client[tictactoe.MakeMoveRequest, tictactoe.MakeMoveResponse]
}

// CreateGame calls tictactoe.TicTacToeService.CreateGame.
func (c *ticTacToeServiceClient) CreateGame(ctx context.Context, req *connect_go.Request[tictactoe.CreateGameRequest]) (*connect_go.Response[tictactoe.CreateGameResponse], error) {
	return c.createGame.CallUnary(ctx, req)
}

// GetGameData calls tictactoe.TicTacToeService.GetGameData.
func (c *ticTacToeServiceClient) GetGameData(ctx context.Context, req *connect_go.Request[tictactoe.GetGameDataRequest]) (*connect_go.Response[tictactoe.GetGameDataResponse], error) {
	return c.getGameData.CallUnary(ctx, req)
}

// MakeMove calls tictactoe.TicTacToeService.MakeMove.
func (c *ticTacToeServiceClient) MakeMove(ctx context.Context, req *connect_go.Request[tictactoe.MakeMoveRequest]) (*connect_go.Response[tictactoe.MakeMoveResponse], error) {
	return c.makeMove.CallUnary(ctx, req)
}

// TicTacToeServiceHandler is an implementation of the tictactoe.TicTacToeService service.
type TicTacToeServiceHandler interface {
	CreateGame(context.Context, *connect_go.Request[tictactoe.CreateGameRequest]) (*connect_go.Response[tictactoe.CreateGameResponse], error)
	GetGameData(context.Context, *connect_go.Request[tictactoe.GetGameDataRequest]) (*connect_go.Response[tictactoe.GetGameDataResponse], error)
	MakeMove(context.Context, *connect_go.Request[tictactoe.MakeMoveRequest]) (*connect_go.Response[tictactoe.MakeMoveResponse], error)
}

// NewTicTacToeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTicTacToeServiceHandler(svc TicTacToeServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/tictactoe.TicTacToeService/CreateGame", connect_go.NewUnaryHandler(
		"/tictactoe.TicTacToeService/CreateGame",
		svc.CreateGame,
		opts...,
	))
	mux.Handle("/tictactoe.TicTacToeService/GetGameData", connect_go.NewUnaryHandler(
		"/tictactoe.TicTacToeService/GetGameData",
		svc.GetGameData,
		opts...,
	))
	mux.Handle("/tictactoe.TicTacToeService/MakeMove", connect_go.NewUnaryHandler(
		"/tictactoe.TicTacToeService/MakeMove",
		svc.MakeMove,
		opts...,
	))
	return "/tictactoe.TicTacToeService/", mux
}

// UnimplementedTicTacToeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTicTacToeServiceHandler struct{}

func (UnimplementedTicTacToeServiceHandler) CreateGame(context.Context, *connect_go.Request[tictactoe.CreateGameRequest]) (*connect_go.Response[tictactoe.CreateGameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tictactoe.TicTacToeService.CreateGame is not implemented"))
}

func (UnimplementedTicTacToeServiceHandler) GetGameData(context.Context, *connect_go.Request[tictactoe.GetGameDataRequest]) (*connect_go.Response[tictactoe.GetGameDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tictactoe.TicTacToeService.GetGameData is not implemented"))
}

func (UnimplementedTicTacToeServiceHandler) MakeMove(context.Context, *connect_go.Request[tictactoe.MakeMoveRequest]) (*connect_go.Response[tictactoe.MakeMoveResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("tictactoe.TicTacToeService.MakeMove is not implemented"))
}
